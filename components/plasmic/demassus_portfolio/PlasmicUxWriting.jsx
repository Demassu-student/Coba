// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vrXCB8dxA4nVS6MjHefASJ
// Component: vG2bSV-ei8
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantss8N69OUi87L } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s8n69O_Ui87-l/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_demassus_portfolio.module.css"; // plasmic-import: vrXCB8dxA4nVS6MjHefASJ/projectcss
import sty from "./PlasmicUxWriting.module.css"; // plasmic-import: vG2bSV-ei8/css

export const PlasmicUxWriting__VariantProps = new Array();

export const PlasmicUxWriting__ArgProps = new Array();

function PlasmicUxWriting__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss8N69OUi87L()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                data-plasmic-name={"handsRandomStuff"}
                data-plasmic-override={overrides.handsRandomStuff}
                className={classNames(projectcss.all, sty.handsRandomStuff)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__maSmz)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "324px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "105px"
                      : "auto"
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "lazy"
                      : "lazy"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/demassus_portfolio/images/group1.svg",
                          fullWidth: 120.929,
                          fullHeight: 319.179,
                          aspectRatio: 0.378125
                        }
                      : {
                          src: "/plasmic/demassus_portfolio/images/group1.svg",
                          fullWidth: 120.929,
                          fullHeight: 319.179,
                          aspectRatio: 0.378125
                        }
                  }
                />
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__itrhb)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "327px"
                      : "373px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "none"
                      : "none"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "64px"
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "lazy"
                      : "lazy"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/demassus_portfolio/images/group.svg",
                          fullWidth: 92.46,
                          fullHeight: 572.244,
                          aspectRatio: 0.162304
                        }
                      : {
                          src: "/plasmic/demassus_portfolio/images/group.svg",
                          fullWidth: 92.46,
                          fullHeight: 572.244,
                          aspectRatio: 0.162304
                        }
                  }
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "handsRandomStuff"],
  freeBox: ["freeBox", "handsRandomStuff"],
  handsRandomStuff: ["handsRandomStuff"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUxWriting__ArgProps,
      internalVariantPropNames: PlasmicUxWriting__VariantProps
    });

    return PlasmicUxWriting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUxWriting";
  } else {
    func.displayName = `PlasmicUxWriting.${nodeName}`;
  }
  return func;
}

export const PlasmicUxWriting = Object.assign(
  // Top-level PlasmicUxWriting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    handsRandomStuff: makeNodeComponent("handsRandomStuff"),
    // Metadata about props expected for PlasmicUxWriting
    internalVariantProps: PlasmicUxWriting__VariantProps,
    internalArgProps: PlasmicUxWriting__ArgProps
  }
);

export default PlasmicUxWriting;
/* prettier-ignore-end */
